
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002910  08002910  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002910  08002910  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002910  08002910  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08002928  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002928  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093ab  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  000293e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8d  00000000  00000000  0002c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b323  00000000  00000000  00042dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082656  00000000  00000000  0004e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a48  00000000  00000000  000d07cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080027bc 	.word	0x080027bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080027bc 	.word	0x080027bc

0800014c <display7SEG>:

#include "Seven_segment_led.h"
#include "main.h"

int led_buffer[4] = {0,0,0,0};
void display7SEG(int number){
 800014c:	b580      	push	{r7, lr}
 800014e:	b0c8      	sub	sp, #288	; 0x120
 8000150:	af00      	add	r7, sp, #0
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	6018      	str	r0, [r3, #0]
	int a[10][7] = {
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	4a42      	ldr	r2, [pc, #264]	; (8000264 <display7SEG+0x118>)
 800015c:	4618      	mov	r0, r3
 800015e:	4611      	mov	r1, r2
 8000160:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000164:	461a      	mov	r2, r3
 8000166:	f002 fb13 	bl	8002790 <memcpy>
		{0, 1, 0, 0, 0, 0, 0}, 	//6
		{0, 0, 0, 1, 1, 1, 1},	//7
		{0, 0, 0, 0, 0, 0, 0}, 	//8
		{0, 0, 0, 0, 1, 0, 0}   //9
	};
	HAL_GPIO_WritePin(GPIOB, seg7_a_Pin, a[number][0]);
 800016a:	f107 0108 	add.w	r1, r7, #8
 800016e:	1d3b      	adds	r3, r7, #4
 8000170:	681a      	ldr	r2, [r3, #0]
 8000172:	4613      	mov	r3, r2
 8000174:	00db      	lsls	r3, r3, #3
 8000176:	1a9b      	subs	r3, r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	b2db      	uxtb	r3, r3
 8000180:	461a      	mov	r2, r3
 8000182:	2108      	movs	r1, #8
 8000184:	4838      	ldr	r0, [pc, #224]	; (8000268 <display7SEG+0x11c>)
 8000186:	f001 faea 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg7_b_Pin, a[number][1]);
 800018a:	f107 0108 	add.w	r1, r7, #8
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	4613      	mov	r3, r2
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	1a9b      	subs	r3, r3, r2
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	440b      	add	r3, r1
 800019c:	3304      	adds	r3, #4
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2110      	movs	r1, #16
 80001a6:	4830      	ldr	r0, [pc, #192]	; (8000268 <display7SEG+0x11c>)
 80001a8:	f001 fad9 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg7_c_Pin, a[number][2]);
 80001ac:	f107 0108 	add.w	r1, r7, #8
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4613      	mov	r3, r2
 80001b6:	00db      	lsls	r3, r3, #3
 80001b8:	1a9b      	subs	r3, r3, r2
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	440b      	add	r3, r1
 80001be:	3308      	adds	r3, #8
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	461a      	mov	r2, r3
 80001c6:	2120      	movs	r1, #32
 80001c8:	4827      	ldr	r0, [pc, #156]	; (8000268 <display7SEG+0x11c>)
 80001ca:	f001 fac8 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg7_d_Pin, a[number][3]);
 80001ce:	f107 0108 	add.w	r1, r7, #8
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	4613      	mov	r3, r2
 80001d8:	00db      	lsls	r3, r3, #3
 80001da:	1a9b      	subs	r3, r3, r2
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	440b      	add	r3, r1
 80001e0:	330c      	adds	r3, #12
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	461a      	mov	r2, r3
 80001e8:	2140      	movs	r1, #64	; 0x40
 80001ea:	481f      	ldr	r0, [pc, #124]	; (8000268 <display7SEG+0x11c>)
 80001ec:	f001 fab7 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg7_e_Pin, a[number][4]);
 80001f0:	f107 0108 	add.w	r1, r7, #8
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	4613      	mov	r3, r2
 80001fa:	00db      	lsls	r3, r3, #3
 80001fc:	1a9b      	subs	r3, r3, r2
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	440b      	add	r3, r1
 8000202:	3310      	adds	r3, #16
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	4816      	ldr	r0, [pc, #88]	; (8000268 <display7SEG+0x11c>)
 800020e:	f001 faa6 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg7_f_Pin, a[number][5]);
 8000212:	f107 0108 	add.w	r1, r7, #8
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4613      	mov	r3, r2
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	1a9b      	subs	r3, r3, r2
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	440b      	add	r3, r1
 8000224:	3314      	adds	r3, #20
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <display7SEG+0x11c>)
 8000232:	f001 fa94 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg7_g_Pin, a[number][6]);
 8000236:	f107 0108 	add.w	r1, r7, #8
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4613      	mov	r3, r2
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	1a9b      	subs	r3, r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	440b      	add	r3, r1
 8000248:	3318      	adds	r3, #24
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <display7SEG+0x11c>)
 8000256:	f001 fa82 	bl	800175e <HAL_GPIO_WritePin>

}
 800025a:	bf00      	nop
 800025c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	080027d4 	.word	0x080027d4
 8000268:	40010c00 	.word	0x40010c00

0800026c <update_display>:

void update_display(int* display_flag){
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	switch (*display_flag){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b03      	cmp	r3, #3
 800027a:	f200 8095 	bhi.w	80003a8 <update_display+0x13c>
 800027e:	a201      	add	r2, pc, #4	; (adr r2, 8000284 <update_display+0x18>)
 8000280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000284:	08000295 	.word	0x08000295
 8000288:	080002db 	.word	0x080002db
 800028c:	08000321 	.word	0x08000321
 8000290:	08000367 	.word	0x08000367
		case 0:{
			(*display_flag)++;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER1_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a4:	4843      	ldr	r0, [pc, #268]	; (80003b4 <update_display+0x148>)
 80002a6:	f001 fa5a 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER2_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b0:	4840      	ldr	r0, [pc, #256]	; (80003b4 <update_display+0x148>)
 80002b2:	f001 fa54 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR1_Pin, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002bc:	483d      	ldr	r0, [pc, #244]	; (80003b4 <update_display+0x148>)
 80002be:	f001 fa4e 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR2_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	483a      	ldr	r0, [pc, #232]	; (80003b4 <update_display+0x148>)
 80002ca:	f001 fa48 	bl	800175e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80002ce:	4b3a      	ldr	r3, [pc, #232]	; (80003b8 <update_display+0x14c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff3a 	bl	800014c <display7SEG>
			break;
 80002d8:	e067      	b.n	80003aa <update_display+0x13e>
		}
		case 1:{
			(*display_flag)++;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER1_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ea:	4832      	ldr	r0, [pc, #200]	; (80003b4 <update_display+0x148>)
 80002ec:	f001 fa37 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER2_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f6:	482f      	ldr	r0, [pc, #188]	; (80003b4 <update_display+0x148>)
 80002f8:	f001 fa31 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR1_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000302:	482c      	ldr	r0, [pc, #176]	; (80003b4 <update_display+0x148>)
 8000304:	f001 fa2b 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR2_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030e:	4829      	ldr	r0, [pc, #164]	; (80003b4 <update_display+0x148>)
 8000310:	f001 fa25 	bl	800175e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000314:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <update_display+0x14c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff17 	bl	800014c <display7SEG>
			break;
 800031e:	e044      	b.n	80003aa <update_display+0x13e>
		}
		case 2:{
			(*display_flag)++;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	1c5a      	adds	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER1_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000330:	4820      	ldr	r0, [pc, #128]	; (80003b4 <update_display+0x148>)
 8000332:	f001 fa14 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER2_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033c:	481d      	ldr	r0, [pc, #116]	; (80003b4 <update_display+0x148>)
 800033e:	f001 fa0e 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR1_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <update_display+0x148>)
 800034a:	f001 fa08 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR2_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	4817      	ldr	r0, [pc, #92]	; (80003b4 <update_display+0x148>)
 8000356:	f001 fa02 	bl	800175e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <update_display+0x14c>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff fef4 	bl	800014c <display7SEG>
			break;
 8000364:	e021      	b.n	80003aa <update_display+0x13e>
		}
		case 3:{
			(*display_flag) = 0;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER1_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000372:	4810      	ldr	r0, [pc, #64]	; (80003b4 <update_display+0x148>)
 8000374:	f001 f9f3 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_VER2_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <update_display+0x148>)
 8000380:	f001 f9ed 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR1_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <update_display+0x148>)
 800038c:	f001 f9e7 	bl	800175e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR2_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <update_display+0x148>)
 8000398:	f001 f9e1 	bl	800175e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <update_display+0x14c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fed3 	bl	800014c <display7SEG>
			break;
 80003a6:	e000      	b.n	80003aa <update_display+0x13e>
		}
		default:{
			break;
 80003a8:	bf00      	nop
		}
	}
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	2000002c 	.word	0x2000002c

080003bc <init_7seg>:

void init_7seg(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_SEG_VER1_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c6:	480e      	ldr	r0, [pc, #56]	; (8000400 <init_7seg+0x44>)
 80003c8:	f001 f9c9 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_SEG_VER2_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <init_7seg+0x44>)
 80003d4:	f001 f9c3 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR1_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003de:	4808      	ldr	r0, [pc, #32]	; (8000400 <init_7seg+0x44>)
 80003e0:	f001 f9bd 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_SEG_HOR2_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <init_7seg+0x44>)
 80003ec:	f001 f9b7 	bl	800175e <HAL_GPIO_WritePin>
	display7SEG(led_buffer[0]);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <init_7seg+0x48>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff fea9 	bl	800014c <display7SEG>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010c00 	.word	0x40010c00
 8000404:	2000002c 	.word	0x2000002c

08000408 <update_7seg_buffer>:
void update_7seg_buffer(int vertical, int horizontal){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	led_buffer[0] = (int)vertical/10;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a2b      	ldr	r2, [pc, #172]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000416:	fb82 1203 	smull	r1, r2, r2, r3
 800041a:	1092      	asrs	r2, r2, #2
 800041c:	17db      	asrs	r3, r3, #31
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000422:	6013      	str	r3, [r2, #0]
	led_buffer[1] = vertical%10;
 8000424:	6879      	ldr	r1, [r7, #4]
 8000426:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000428:	fb83 2301 	smull	r2, r3, r3, r1
 800042c:	109a      	asrs	r2, r3, #2
 800042e:	17cb      	asrs	r3, r1, #31
 8000430:	1ad2      	subs	r2, r2, r3
 8000432:	4613      	mov	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4413      	add	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	1aca      	subs	r2, r1, r3
 800043c:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <update_7seg_buffer+0xc0>)
 800043e:	605a      	str	r2, [r3, #4]
	led_buffer[2] = (int)horizontal/10;
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1092      	asrs	r2, r2, #2
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000450:	6093      	str	r3, [r2, #8]
	led_buffer[3] = horizontal%10;
 8000452:	6839      	ldr	r1, [r7, #0]
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000456:	fb83 2301 	smull	r2, r3, r3, r1
 800045a:	109a      	asrs	r2, r3, #2
 800045c:	17cb      	asrs	r3, r1, #31
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	1aca      	subs	r2, r1, r3
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <update_7seg_buffer+0xc0>)
 800046c:	60da      	str	r2, [r3, #12]
	if(led_buffer[3] <= 0){
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	2b00      	cmp	r3, #0
 8000474:	dc07      	bgt.n	8000486 <update_7seg_buffer+0x7e>
		led_buffer[3] = 0;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
		led_buffer[2]--;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <update_7seg_buffer+0xc0>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000484:	6093      	str	r3, [r2, #8]
	}
	if(led_buffer[2] <= 0){
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	2b00      	cmp	r3, #0
 800048c:	dc02      	bgt.n	8000494 <update_7seg_buffer+0x8c>
		led_buffer[2] = 0;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
	}
	if(led_buffer[1] <= 0){
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dc07      	bgt.n	80004ac <update_7seg_buffer+0xa4>
		led_buffer[0]--;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <update_7seg_buffer+0xc0>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004a4:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 0;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
	}
	if(led_buffer[0] <= 0){
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dc02      	bgt.n	80004ba <update_7seg_buffer+0xb2>
		led_buffer[0] = 0;
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
	}
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	66666667 	.word	0x66666667
 80004c8:	2000002c 	.word	0x2000002c

080004cc <fsm_for_input_processing>:
	MODE4
};

enum SystemState system_state = MODE1;

void fsm_for_input_processing(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//init_traffic_light();
	switch(system_state){
 80004d0:	4b3b      	ldr	r3, [pc, #236]	; (80005c0 <fsm_for_input_processing+0xf4>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d868      	bhi.n	80005aa <fsm_for_input_processing+0xde>
 80004d8:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <fsm_for_input_processing+0x14>)
 80004da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004de:	bf00      	nop
 80004e0:	080004f1 	.word	0x080004f1
 80004e4:	08000509 	.word	0x08000509
 80004e8:	0800053f 	.word	0x0800053f
 80004ec:	08000575 	.word	0x08000575
	case MODE1:
	{
		traffic_light();
 80004f0:	f000 fc88 	bl	8000e04 <traffic_light>
		if(is_button_pressed(0) == 1){
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f8ff 	bl	80006f8 <is_button_pressed>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d156      	bne.n	80005ae <fsm_for_input_processing+0xe2>
			system_state = MODE2;
 8000500:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <fsm_for_input_processing+0xf4>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
			//INCREASE VALUE OF PORT A BY ONE UNIT
		}
		break;
 8000506:	e052      	b.n	80005ae <fsm_for_input_processing+0xe2>
	}
	case MODE2:
	{
		update_7seg_buffer(get_red_cycle()/1000, 2);
 8000508:	f000 fbc6 	bl	8000c98 <get_red_cycle>
 800050c:	4603      	mov	r3, r0
 800050e:	4a2d      	ldr	r2, [pc, #180]	; (80005c4 <fsm_for_input_processing+0xf8>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1192      	asrs	r2, r2, #6
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	2102      	movs	r1, #2
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff73 	bl	8000408 <update_7seg_buffer>
		scan_4leds();
 8000522:	f000 fbfb 	bl	8000d1c <scan_4leds>
		display_red_light();
 8000526:	f000 fd8d 	bl	8001044 <display_red_light>
		if(is_button_pressed(0) == 1){
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f8e4 	bl	80006f8 <is_button_pressed>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d13d      	bne.n	80005b2 <fsm_for_input_processing+0xe6>
			system_state = MODE3;
 8000536:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <fsm_for_input_processing+0xf4>)
 8000538:	2202      	movs	r2, #2
 800053a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800053c:	e039      	b.n	80005b2 <fsm_for_input_processing+0xe6>
	}
	case MODE3:
	{
		update_7seg_buffer(get_yellow_cycle()/1000, 3);
 800053e:	f000 fbb5 	bl	8000cac <get_yellow_cycle>
 8000542:	4603      	mov	r3, r0
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <fsm_for_input_processing+0xf8>)
 8000546:	fb82 1203 	smull	r1, r2, r2, r3
 800054a:	1192      	asrs	r2, r2, #6
 800054c:	17db      	asrs	r3, r3, #31
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	2103      	movs	r1, #3
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff58 	bl	8000408 <update_7seg_buffer>
		scan_4leds();
 8000558:	f000 fbe0 	bl	8000d1c <scan_4leds>
		display_yellow_light();
 800055c:	f000 fd94 	bl	8001088 <display_yellow_light>
		if(is_button_pressed(0)){
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f8c9 	bl	80006f8 <is_button_pressed>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d024      	beq.n	80005b6 <fsm_for_input_processing+0xea>
			system_state = MODE4;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <fsm_for_input_processing+0xf4>)
 800056e:	2203      	movs	r2, #3
 8000570:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000572:	e020      	b.n	80005b6 <fsm_for_input_processing+0xea>
	}
	case MODE4:
	{
		update_7seg_buffer(get_green_cycle()/1000, 4);
 8000574:	f000 fba4 	bl	8000cc0 <get_green_cycle>
 8000578:	4603      	mov	r3, r0
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <fsm_for_input_processing+0xf8>)
 800057c:	fb82 1203 	smull	r1, r2, r2, r3
 8000580:	1192      	asrs	r2, r2, #6
 8000582:	17db      	asrs	r3, r3, #31
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	2104      	movs	r1, #4
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff3d 	bl	8000408 <update_7seg_buffer>
		scan_4leds();
 800058e:	f000 fbc5 	bl	8000d1c <scan_4leds>
		display_green_light();
 8000592:	f000 fd9b 	bl	80010cc <display_green_light>
		if(is_button_pressed(0)){
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f8ae 	bl	80006f8 <is_button_pressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00b      	beq.n	80005ba <fsm_for_input_processing+0xee>
			system_state = MODE1;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <fsm_for_input_processing+0xf4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005a8:	e007      	b.n	80005ba <fsm_for_input_processing+0xee>
	}
	default:
		break;
 80005aa:	bf00      	nop
 80005ac:	e006      	b.n	80005bc <fsm_for_input_processing+0xf0>
		break;
 80005ae:	bf00      	nop
 80005b0:	e004      	b.n	80005bc <fsm_for_input_processing+0xf0>
		break;
 80005b2:	bf00      	nop
 80005b4:	e002      	b.n	80005bc <fsm_for_input_processing+0xf0>
		break;
 80005b6:	bf00      	nop
 80005b8:	e000      	b.n	80005bc <fsm_for_input_processing+0xf0>
		break;
 80005ba:	bf00      	nop
	}
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000003c 	.word	0x2000003c
 80005c4:	10624dd3 	.word	0x10624dd3

080005c8 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int counter_for_hold = 0;

void button_reading(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
				counter_for_hold = 0;
			}
		}
	}*/

	for(int i = 0; i<N0_OF_BUTTONS; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e076      	b.n	80006c2 <button_reading+0xfa>
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 80005d4:	4a3f      	ldr	r2, [pc, #252]	; (80006d4 <button_reading+0x10c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	7819      	ldrb	r1, [r3, #0]
 80005dc:	4a3e      	ldr	r2, [pc, #248]	; (80006d8 <button_reading+0x110>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80005e6:	4a3d      	ldr	r2, [pc, #244]	; (80006dc <button_reading+0x114>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	7819      	ldrb	r1, [r3, #0]
 80005ee:	4a39      	ldr	r2, [pc, #228]	; (80006d4 <button_reading+0x10c>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4413      	add	r3, r2
 80005f4:	460a      	mov	r2, r1
 80005f6:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(GPIOB, BTN1_Pin);
 80005f8:	2101      	movs	r1, #1
 80005fa:	4839      	ldr	r0, [pc, #228]	; (80006e0 <button_reading+0x118>)
 80005fc:	f001 f898 	bl	8001730 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	4a35      	ldr	r2, [pc, #212]	; (80006dc <button_reading+0x114>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	460a      	mov	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])){
 800060e:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <button_reading+0x110>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	492f      	ldr	r1, [pc, #188]	; (80006d4 <button_reading+0x10c>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	440b      	add	r3, r1
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d14c      	bne.n	80006bc <button_reading+0xf4>
 8000622:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <button_reading+0x10c>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	492c      	ldr	r1, [pc, #176]	; (80006dc <button_reading+0x114>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	440b      	add	r3, r1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d142      	bne.n	80006bc <button_reading+0xf4>
			if(debounceButtonBuffer3[i] != debounceButtonBuffer2[i]){
 8000636:	4a2b      	ldr	r2, [pc, #172]	; (80006e4 <button_reading+0x11c>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4927      	ldr	r1, [pc, #156]	; (80006dc <button_reading+0x114>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	440b      	add	r3, r1
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d019      	beq.n	800067e <button_reading+0xb6>
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <button_reading+0x114>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	7819      	ldrb	r1, [r3, #0]
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <button_reading+0x11c>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	460a      	mov	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED){
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <button_reading+0x114>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d129      	bne.n	80006bc <button_reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_PRESSED;
 8000668:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <button_reading+0x120>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
					counterForButtonPress1s[i] = 0;
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <button_reading+0x124>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2100      	movs	r1, #0
 8000678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800067c:	e01e      	b.n	80006bc <button_reading+0xf4>
				}
			}
			else{
				counterForButtonPress1s[i]++;
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <button_reading+0x124>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000686:	3301      	adds	r3, #1
 8000688:	b299      	uxth	r1, r3
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <button_reading+0x124>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] >= DURATION_FOR_AUTO_INCREASING){
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <button_reading+0x124>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069a:	2b63      	cmp	r3, #99	; 0x63
 800069c:	d90e      	bls.n	80006bc <button_reading+0xf4>
					flagForButtonPress1s[i] = 1;
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <button_reading+0x128>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4413      	add	r3, r2
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
					counterForButtonPress1s[i] = 0;
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <button_reading+0x124>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2100      	movs	r1, #0
 80006ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counter_for_hold++;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <button_reading+0x12c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <button_reading+0x12c>)
 80006ba:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<N0_OF_BUTTONS; i++){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dd85      	ble.n	80005d4 <button_reading+0xc>
				}
			}
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000048 	.word	0x20000048
 80006d8:	20000044 	.word	0x20000044
 80006dc:	2000004c 	.word	0x2000004c
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	20000050 	.word	0x20000050
 80006e8:	20000040 	.word	0x20000040
 80006ec:	20000058 	.word	0x20000058
 80006f0:	20000054 	.word	0x20000054
 80006f4:	2000005c 	.word	0x2000005c

080006f8 <is_button_pressed>:

int is_button_pressed(uint8_t index){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <is_button_pressed+0x14>
 8000708:	2300      	movs	r3, #0
 800070a:	e00b      	b.n	8000724 <is_button_pressed+0x2c>
	if(buttonBuffer[index] == BUTTON_IS_PRESSED){
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <is_button_pressed+0x38>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d105      	bne.n	8000722 <is_button_pressed+0x2a>
		buttonBuffer[index] = BUTTON_IS_RELEASED;
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <is_button_pressed+0x38>)
 800071a:	2100      	movs	r1, #0
 800071c:	54d1      	strb	r1, [r2, r3]
		return 1;
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <is_button_pressed+0x2c>
	}
	else{
		return 0;
 8000722:	2300      	movs	r3, #0
	}
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000040 	.word	0x20000040

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 fd10 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f80e 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f8a8 	bl	8000894 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000744:	f000 f846 	bl	80007d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <main+0x24>)
 800074a:	f001 fc65 	bl	8002018 <HAL_TIM_Base_Start_IT>
  init_traffic_light();
 800074e:	f000 fafb 	bl	8000d48 <init_traffic_light>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 fsm_for_input_processing();
 8000752:	f7ff febb 	bl	80004cc <fsm_for_input_processing>
 8000756:	e7fc      	b.n	8000752 <main+0x1e>
 8000758:	20000094 	.word	0x20000094

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	; 0x40
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	2228      	movs	r2, #40	; 0x28
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 f81e 	bl	80027ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	2310      	movs	r3, #16
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f814 	bl	80017c0 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800079e:	f000 f903 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa80 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f8ef 	bl	80009a8 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3740      	adds	r7, #64	; 0x40
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_TIM2_Init+0xb4>)
 80007f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_TIM2_Init+0xb4>)
 80007fa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000808:	2209      	movs	r2, #9
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_TIM2_Init+0xb4>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_TIM2_Init+0xb4>)
 800081a:	f001 fbad 	bl	8001f78 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000824:	f000 f8c0 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	4814      	ldr	r0, [pc, #80]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000836:	f001 fd43 	bl	80022c0 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f8b2 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000852:	f001 ff0f 	bl	8002674 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 f8a4 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  interrupt_cycle = (int)(((1+htim2.Init.Prescaler)*(1+htim2.Init.Period))/8000);
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <MX_TIM2_Init+0xb4>)
 8000868:	68d2      	ldr	r2, [r2, #12]
 800086a:	3201      	adds	r2, #1
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <MX_TIM2_Init+0xb8>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	0a5b      	lsrs	r3, r3, #9
 8000878:	461a      	mov	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_TIM2_Init+0xbc>)
 800087c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000094 	.word	0x20000094
 800088c:	10624dd3 	.word	0x10624dd3
 8000890:	20000060 	.word	0x20000060

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_GPIO_Init+0xd0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a2d      	ldr	r2, [pc, #180]	; (8000964 <MX_GPIO_Init+0xd0>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_GPIO_Init+0xd0>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_GPIO_Init+0xd0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <MX_GPIO_Init+0xd0>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_GPIO_Init+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin|LED_RED_HOR_Pin
 80008d8:	2201      	movs	r2, #1
 80008da:	f640 71fe 	movw	r1, #4094	; 0xffe
 80008de:	4822      	ldr	r0, [pc, #136]	; (8000968 <MX_GPIO_Init+0xd4>)
 80008e0:	f000 ff3d 	bl	800175e <HAL_GPIO_WritePin>
                          |LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN_VER_1_Pin|EN_VER_2_Pin
                          |EN_HOR_1_Pin|EN_HOR_2_Pin|LED_TEST_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_SEG_VER1_Pin|EN_SEG_VER2_Pin|EN_SEG_HOR1_Pin|EN_SEG_HOR2_Pin
 80008e4:	2201      	movs	r2, #1
 80008e6:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 80008ea:	4820      	ldr	r0, [pc, #128]	; (800096c <MX_GPIO_Init+0xd8>)
 80008ec:	f000 ff37 	bl	800175e <HAL_GPIO_WritePin>
                          |seg7_e_Pin|seg7_f_Pin|seg7_g_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LED_RED_VER_Pin LED_YELLOW_VER_Pin LED_GREEN_VER_Pin LED_RED_HOR_Pin
                           LED_YELLOW_HOR_Pin LED_GREEN_HOR_Pin EN_VER_1_Pin EN_VER_2_Pin
                           EN_HOR_1_Pin EN_HOR_2_Pin LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin|LED_RED_HOR_Pin
 80008f0:	f640 73fe 	movw	r3, #4094	; 0xffe
 80008f4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN_VER_1_Pin|EN_VER_2_Pin
                          |EN_HOR_1_Pin|EN_HOR_2_Pin|LED_TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2302      	movs	r3, #2
 8000900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	; (8000968 <MX_GPIO_Init+0xd4>)
 800090a:	f000 fd97 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000916:	2302      	movs	r3, #2
 8000918:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <MX_GPIO_Init+0xd8>)
 8000922:	f000 fd8b 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin;
 8000926:	2306      	movs	r3, #6
 8000928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	2301      	movs	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_GPIO_Init+0xd8>)
 800093a:	f000 fd7f 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_SEG_VER1_Pin EN_SEG_VER2_Pin EN_SEG_HOR1_Pin EN_SEG_HOR2_Pin
                           seg7_a_Pin seg7_b_Pin seg7_c_Pin seg7_d_Pin
                           seg7_e_Pin seg7_f_Pin seg7_g_Pin */
  GPIO_InitStruct.Pin = EN_SEG_VER1_Pin|EN_SEG_VER2_Pin|EN_SEG_HOR1_Pin|EN_SEG_HOR2_Pin
 800093e:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000942:	60bb      	str	r3, [r7, #8]
                          |seg7_a_Pin|seg7_b_Pin|seg7_c_Pin|seg7_d_Pin
                          |seg7_e_Pin|seg7_f_Pin|seg7_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0xd8>)
 8000958:	f000 fd70 	bl	800143c <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40010c00 	.word	0x40010c00

08000970 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000980:	d103      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000982:	f7ff fe21 	bl	80005c8 <button_reading>
		timerRun();
 8000986:	f000 f889 	bl	8000a9c <timerRun>
	}
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <get_interrupt_cycle>:

int get_interrupt_cycle(){
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	return interrupt_cycle;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <get_interrupt_cycle+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000060 	.word	0x20000060

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <set_Timer1>:
int timer4_counter = 0;
int timer_flag1 = 0;
int timer_flag2 = 0;
int timer_flag3 = 0;
int timer_flag4 = 0;
void set_Timer1(int duration, int interrupt_cycle){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	timer1_counter = duration/interrupt_cycle;
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <set_Timer1+0x28>)
 80009c8:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <set_Timer1+0x2c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000064 	.word	0x20000064
 80009e0:	20000074 	.word	0x20000074

080009e4 <set_Timer2>:

void set_Timer2(int duration, int interrupt_cycle){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	timer2_counter = duration/interrupt_cycle;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <set_Timer2+0x28>)
 80009f8:	6013      	str	r3, [r2, #0]
	timer_flag2 = 0;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <set_Timer2+0x2c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000068 	.word	0x20000068
 8000a10:	20000078 	.word	0x20000078

08000a14 <set_Timer3>:

void set_Timer3(int duration, int interrupt_cycle){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	timer3_counter = duration/interrupt_cycle;
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <set_Timer3+0x28>)
 8000a28:	6013      	str	r3, [r2, #0]
	timer_flag3 = 0;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <set_Timer3+0x2c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000006c 	.word	0x2000006c
 8000a40:	2000007c 	.word	0x2000007c

08000a44 <set_Timer4>:

void set_Timer4(int duration, int interrupt_cycle){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	timer4_counter = duration/interrupt_cycle;
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <set_Timer4+0x28>)
 8000a58:	6013      	str	r3, [r2, #0]
	timer_flag4 = 0;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <set_Timer4+0x2c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000070 	.word	0x20000070
 8000a70:	20000080 	.word	0x20000080

08000a74 <get_timer1>:

int get_timer1(){
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	return timer1_counter;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <get_timer1+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	20000064 	.word	0x20000064

08000a88 <get_timer3>:

int get_timer3(){
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	return timer3_counter;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <get_timer3+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	2000006c 	.word	0x2000006c

08000a9c <timerRun>:
void timerRun(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	timer1_counter--;//counter for main flow, used for led cycle in vertical
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <timerRun+0x6c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <timerRun+0x6c>)
 8000aa8:	6013      	str	r3, [r2, #0]
	timer3_counter--;//counter for main flow, used for led cycle in horizontal
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <timerRun+0x70>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <timerRun+0x70>)
 8000ab2:	6013      	str	r3, [r2, #0]
	timer2_counter--;//counter for scan led
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <timerRun+0x74>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <timerRun+0x74>)
 8000abc:	6013      	str	r3, [r2, #0]
	timer4_counter--;//counter for scan 7segment leds
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <timerRun+0x78>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <timerRun+0x78>)
 8000ac6:	6013      	str	r3, [r2, #0]
	if(timer1_counter <= 0){
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <timerRun+0x6c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dc02      	bgt.n	8000ad6 <timerRun+0x3a>
		timer_flag1 = 1;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <timerRun+0x7c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter <= 0){
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <timerRun+0x74>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dc02      	bgt.n	8000ae4 <timerRun+0x48>
		timer_flag2 = 1;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <timerRun+0x80>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter <= 0){
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <timerRun+0x70>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	dc02      	bgt.n	8000af2 <timerRun+0x56>
		timer_flag3 = 1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <timerRun+0x84>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter <= 0){
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <timerRun+0x78>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dc02      	bgt.n	8000b00 <timerRun+0x64>
		timer_flag4 = 1;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <timerRun+0x88>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
		}
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000064 	.word	0x20000064
 8000b0c:	2000006c 	.word	0x2000006c
 8000b10:	20000068 	.word	0x20000068
 8000b14:	20000070 	.word	0x20000070
 8000b18:	20000074 	.word	0x20000074
 8000b1c:	20000078 	.word	0x20000078
 8000b20:	2000007c 	.word	0x2000007c
 8000b24:	20000080 	.word	0x20000080

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x5c>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_MspInit+0x60>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_MspInit+0x60>)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010000 	.word	0x40010000

08000b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d113      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_TIM_Base_MspInit+0x44>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_TIM_Base_MspInit+0x44>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_Base_MspInit+0x44>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201c      	movs	r0, #28
 8000bbc:	f000 fc07 	bl	80013ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f000 fc20 	bl	8001406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 fae5 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM2_IRQHandler+0x10>)
 8000c2a:	f001 fa41 	bl	80020b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000094 	.word	0x20000094

08000c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <set_red_cycle>:
};
int red_cycle = 0, yellow_cycle = 0, green_cycle = 0;
enum traffic_light_state vertical = RED;
enum traffic_light_state horizontal = GREEN;
int display_flag;
void set_red_cycle(int duration){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	red_cycle = duration;
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <set_red_cycle+0x18>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000084 	.word	0x20000084

08000c60 <set_yellow_cycle>:

void set_yellow_cycle(int duration){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	yellow_cycle = duration;
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <set_yellow_cycle+0x18>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000088 	.word	0x20000088

08000c7c <set_green_cycle>:

void set_green_cycle(int duration){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	green_cycle = duration;
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <set_green_cycle+0x18>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	2000008c 	.word	0x2000008c

08000c98 <get_red_cycle>:

int get_red_cycle(){
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	return red_cycle;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <get_red_cycle+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000084 	.word	0x20000084

08000cac <get_yellow_cycle>:

int get_yellow_cycle(){
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	return yellow_cycle;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <get_yellow_cycle+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000088 	.word	0x20000088

08000cc0 <get_green_cycle>:

int get_green_cycle(){
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	return green_cycle;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <get_green_cycle+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <scan_2leds>:
void  scan_2leds(uint16_t led1, uint16_t led2){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	80fb      	strh	r3, [r7, #6]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	80bb      	strh	r3, [r7, #4]
	if(timer_flag2 == 1){
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <scan_2leds+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10e      	bne.n	8000d0a <scan_2leds+0x36>
		set_Timer2(100, get_interrupt_cycle());
 8000cec:	f7ff fe52 	bl	8000994 <get_interrupt_cycle>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f7ff fe75 	bl	80009e4 <set_Timer2>
		HAL_GPIO_TogglePin(GPIOA, led1|led2);
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <scan_2leds+0x44>)
 8000d06:	f000 fd42 	bl	800178e <HAL_GPIO_TogglePin>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000078 	.word	0x20000078
 8000d18:	40010800 	.word	0x40010800

08000d1c <scan_4leds>:

void scan_4leds(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	if(timer_flag4 == 1){
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <scan_4leds+0x24>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d109      	bne.n	8000d3c <scan_4leds+0x20>
		set_Timer4(100, get_interrupt_cycle());
 8000d28:	f7ff fe34 	bl	8000994 <get_interrupt_cycle>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f7ff fe87 	bl	8000a44 <set_Timer4>
		update_display(&display_flag);
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <scan_4leds+0x28>)
 8000d38:	f7ff fa98 	bl	800026c <update_display>
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000080 	.word	0x20000080
 8000d44:	200000dc 	.word	0x200000dc

08000d48 <init_traffic_light>:
void init_traffic_light(){
 8000d48:	b598      	push	{r3, r4, r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin, GPIO_PIN_RESET);//at beginning, the red light of vertical ON
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4828      	ldr	r0, [pc, #160]	; (8000df4 <init_traffic_light+0xac>)
 8000d52:	f000 fd04 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);//at the beginning, the yellow and green light of vertical OFF
 8000d56:	2201      	movs	r2, #1
 8000d58:	210c      	movs	r1, #12
 8000d5a:	4826      	ldr	r0, [pc, #152]	; (8000df4 <init_traffic_light+0xac>)
 8000d5c:	f000 fcff 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);//at beginning, the green light of horizontal ON
 8000d60:	2200      	movs	r2, #0
 8000d62:	2140      	movs	r1, #64	; 0x40
 8000d64:	4823      	ldr	r0, [pc, #140]	; (8000df4 <init_traffic_light+0xac>)
 8000d66:	f000 fcfa 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_RED_HOR_Pin, GPIO_PIN_SET);//at the beginning, the red and yellow light of horizontal OFF
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2130      	movs	r1, #48	; 0x30
 8000d6e:	4821      	ldr	r0, [pc, #132]	; (8000df4 <init_traffic_light+0xac>)
 8000d70:	f000 fcf5 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_HOR_1_Pin|EN_VER_1_Pin, GPIO_PIN_RESET);//initial for scan traffic led
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000d7a:	481e      	ldr	r0, [pc, #120]	; (8000df4 <init_traffic_light+0xac>)
 8000d7c:	f000 fcef 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_HOR_2_Pin|EN_VER_2_Pin, GPIO_PIN_SET);//initial for scan traffic led
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d86:	481b      	ldr	r0, [pc, #108]	; (8000df4 <init_traffic_light+0xac>)
 8000d88:	f000 fce9 	bl	800175e <HAL_GPIO_WritePin>
	set_red_cycle(INIT_RED);//initial value for red cycle
 8000d8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d90:	f7ff ff58 	bl	8000c44 <set_red_cycle>
	set_yellow_cycle(INIT_YELLOW);//initial value for yellow cycle
 8000d94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d98:	f7ff ff62 	bl	8000c60 <set_yellow_cycle>
	set_green_cycle(INIT_GREEN);//initial value for green cycle
 8000d9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000da0:	f7ff ff6c 	bl	8000c7c <set_green_cycle>
	set_Timer1(red_cycle, get_interrupt_cycle());
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <init_traffic_light+0xb0>)
 8000da6:	681c      	ldr	r4, [r3, #0]
 8000da8:	f7ff fdf4 	bl	8000994 <get_interrupt_cycle>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4619      	mov	r1, r3
 8000db0:	4620      	mov	r0, r4
 8000db2:	f7ff fdff 	bl	80009b4 <set_Timer1>
	set_Timer3(green_cycle, get_interrupt_cycle());
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <init_traffic_light+0xb4>)
 8000db8:	681c      	ldr	r4, [r3, #0]
 8000dba:	f7ff fdeb 	bl	8000994 <get_interrupt_cycle>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f7ff fe26 	bl	8000a14 <set_Timer3>
	set_Timer2(100, get_interrupt_cycle());//100 indicates for time scan(for traffic light)
 8000dc8:	f7ff fde4 	bl	8000994 <get_interrupt_cycle>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2064      	movs	r0, #100	; 0x64
 8000dd2:	f7ff fe07 	bl	80009e4 <set_Timer2>
	set_Timer4(100, get_interrupt_cycle());//100 indicates for time scan(for 7segment led)
 8000dd6:	f7ff fddd 	bl	8000994 <get_interrupt_cycle>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f7ff fe30 	bl	8000a44 <set_Timer4>
	init_7seg();//turn on the first 7segment led, purpose for scan led
 8000de4:	f7ff faea 	bl	80003bc <init_7seg>
	display_flag = 0;//turn on the first 7segment led, purpose for scan led
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <init_traffic_light+0xb8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	bd98      	pop	{r3, r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800
 8000df8:	20000084 	.word	0x20000084
 8000dfc:	2000008c 	.word	0x2000008c
 8000e00:	200000dc 	.word	0x200000dc

08000e04 <traffic_light>:
void traffic_light(){
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	af00      	add	r7, sp, #0
		update_7seg_buffer(get_timer1()*get_interrupt_cycle()/1000, get_timer3()*get_interrupt_cycle()/1000);
 8000e08:	f7ff fe34 	bl	8000a74 <get_timer1>
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	f7ff fdc1 	bl	8000994 <get_interrupt_cycle>
 8000e12:	4603      	mov	r3, r0
 8000e14:	fb03 f304 	mul.w	r3, r3, r4
 8000e18:	4a81      	ldr	r2, [pc, #516]	; (8001020 <traffic_light+0x21c>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1192      	asrs	r2, r2, #6
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad4      	subs	r4, r2, r3
 8000e24:	f7ff fe30 	bl	8000a88 <get_timer3>
 8000e28:	4605      	mov	r5, r0
 8000e2a:	f7ff fdb3 	bl	8000994 <get_interrupt_cycle>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	fb03 f305 	mul.w	r3, r3, r5
 8000e34:	4a7a      	ldr	r2, [pc, #488]	; (8001020 <traffic_light+0x21c>)
 8000e36:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3a:	1192      	asrs	r2, r2, #6
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	4620      	mov	r0, r4
 8000e44:	f7ff fae0 	bl	8000408 <update_7seg_buffer>
		scan_4leds();
 8000e48:	f7ff ff68 	bl	8000d1c <scan_4leds>
	 	  switch (vertical){
 8000e4c:	4b75      	ldr	r3, [pc, #468]	; (8001024 <traffic_light+0x220>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d046      	beq.n	8000ee2 <traffic_light+0xde>
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	dc64      	bgt.n	8000f22 <traffic_light+0x11e>
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <traffic_light+0x5e>
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d020      	beq.n	8000ea2 <traffic_light+0x9e>
	 	  			  set_Timer1(yellow_cycle, get_interrupt_cycle());
	 	  		  }
	 	  		  break;
	 	  	  }
	 	  	  default:{
	 	  		  break;
 8000e60:	e05f      	b.n	8000f22 <traffic_light+0x11e>
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2102      	movs	r1, #2
 8000e66:	4870      	ldr	r0, [pc, #448]	; (8001028 <traffic_light+0x224>)
 8000e68:	f000 fc79 	bl	800175e <HAL_GPIO_WritePin>
	 	  		  scan_2leds(EN_VER_1_Pin, EN_VER_2_Pin);
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	2080      	movs	r0, #128	; 0x80
 8000e72:	f7ff ff2f 	bl	8000cd4 <scan_2leds>
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	210c      	movs	r1, #12
 8000e7a:	486b      	ldr	r0, [pc, #428]	; (8001028 <traffic_light+0x224>)
 8000e7c:	f000 fc6f 	bl	800175e <HAL_GPIO_WritePin>
	 	  		  if(timer_flag1 == 1){
 8000e80:	4b6a      	ldr	r3, [pc, #424]	; (800102c <traffic_light+0x228>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d14e      	bne.n	8000f26 <traffic_light+0x122>
	 	  			  vertical = GREEN;
 8000e88:	4b66      	ldr	r3, [pc, #408]	; (8001024 <traffic_light+0x220>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	701a      	strb	r2, [r3, #0]
	 	  			  set_Timer1(green_cycle, get_interrupt_cycle());
 8000e8e:	4b68      	ldr	r3, [pc, #416]	; (8001030 <traffic_light+0x22c>)
 8000e90:	681c      	ldr	r4, [r3, #0]
 8000e92:	f7ff fd7f 	bl	8000994 <get_interrupt_cycle>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff fd8a 	bl	80009b4 <set_Timer1>
	 	  		  break;
 8000ea0:	e041      	b.n	8000f26 <traffic_light+0x122>
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4860      	ldr	r0, [pc, #384]	; (8001028 <traffic_light+0x224>)
 8000ea8:	f000 fc59 	bl	800175e <HAL_GPIO_WritePin>
	 	  		  scan_2leds(EN_VER_1_Pin, EN_VER_2_Pin);
 8000eac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb0:	2080      	movs	r0, #128	; 0x80
 8000eb2:	f7ff ff0f 	bl	8000cd4 <scan_2leds>
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	210a      	movs	r1, #10
 8000eba:	485b      	ldr	r0, [pc, #364]	; (8001028 <traffic_light+0x224>)
 8000ebc:	f000 fc4f 	bl	800175e <HAL_GPIO_WritePin>
	 	  		  if(timer_flag1 == 1){
 8000ec0:	4b5a      	ldr	r3, [pc, #360]	; (800102c <traffic_light+0x228>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d130      	bne.n	8000f2a <traffic_light+0x126>
	 	  			  vertical = RED;
 8000ec8:	4b56      	ldr	r3, [pc, #344]	; (8001024 <traffic_light+0x220>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	 	  			  set_Timer1(red_cycle, get_interrupt_cycle());
 8000ece:	4b59      	ldr	r3, [pc, #356]	; (8001034 <traffic_light+0x230>)
 8000ed0:	681c      	ldr	r4, [r3, #0]
 8000ed2:	f7ff fd5f 	bl	8000994 <get_interrupt_cycle>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fd6a 	bl	80009b4 <set_Timer1>
	 	  		  break;
 8000ee0:	e023      	b.n	8000f2a <traffic_light+0x126>
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4850      	ldr	r0, [pc, #320]	; (8001028 <traffic_light+0x224>)
 8000ee8:	f000 fc39 	bl	800175e <HAL_GPIO_WritePin>
	 	  		  scan_2leds(EN_VER_1_Pin, EN_VER_2_Pin);
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	2080      	movs	r0, #128	; 0x80
 8000ef2:	f7ff feef 	bl	8000cd4 <scan_2leds>
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin|LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2106      	movs	r1, #6
 8000efa:	484b      	ldr	r0, [pc, #300]	; (8001028 <traffic_light+0x224>)
 8000efc:	f000 fc2f 	bl	800175e <HAL_GPIO_WritePin>
	 	  		  if(timer_flag1 == 1){
 8000f00:	4b4a      	ldr	r3, [pc, #296]	; (800102c <traffic_light+0x228>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d112      	bne.n	8000f2e <traffic_light+0x12a>
	 	  			  vertical = YELLOW;
 8000f08:	4b46      	ldr	r3, [pc, #280]	; (8001024 <traffic_light+0x220>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
	 	  			  set_Timer1(yellow_cycle, get_interrupt_cycle());
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <traffic_light+0x234>)
 8000f10:	681c      	ldr	r4, [r3, #0]
 8000f12:	f7ff fd3f 	bl	8000994 <get_interrupt_cycle>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff fd4a 	bl	80009b4 <set_Timer1>
	 	  		  break;
 8000f20:	e005      	b.n	8000f2e <traffic_light+0x12a>
	 	  		  break;
 8000f22:	bf00      	nop
 8000f24:	e004      	b.n	8000f30 <traffic_light+0x12c>
	 	  		  break;
 8000f26:	bf00      	nop
 8000f28:	e002      	b.n	8000f30 <traffic_light+0x12c>
	 	  		  break;
 8000f2a:	bf00      	nop
 8000f2c:	e000      	b.n	8000f30 <traffic_light+0x12c>
	 	  		  break;
 8000f2e:	bf00      	nop
	 	  	  }
	 	  }
	 	  switch (horizontal){
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <traffic_light+0x238>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d048      	beq.n	8000fca <traffic_light+0x1c6>
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	dc67      	bgt.n	800100c <traffic_light+0x208>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <traffic_light+0x142>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d021      	beq.n	8000f88 <traffic_light+0x184>
	 	  	  			  set_Timer3(yellow_cycle, get_interrupt_cycle());
	 	  	  		  }
	 	  	  		  break;
	 	  	  	  }
	 	  	  	  default:{
	 	  	  		  break;
 8000f44:	e062      	b.n	800100c <traffic_light+0x208>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4837      	ldr	r0, [pc, #220]	; (8001028 <traffic_light+0x224>)
 8000f4c:	f000 fc07 	bl	800175e <HAL_GPIO_WritePin>
	 	  	  		  scan_2leds(EN_HOR_1_Pin, EN_HOR_2_Pin);
 8000f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f58:	f7ff febc 	bl	8000cd4 <scan_2leds>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2160      	movs	r1, #96	; 0x60
 8000f60:	4831      	ldr	r0, [pc, #196]	; (8001028 <traffic_light+0x224>)
 8000f62:	f000 fbfc 	bl	800175e <HAL_GPIO_WritePin>
	 	  	  		  if(timer_flag3 == 1){
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <traffic_light+0x23c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d150      	bne.n	8001010 <traffic_light+0x20c>
	 	  	  			  horizontal = GREEN;
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <traffic_light+0x238>)
 8000f70:	2202      	movs	r2, #2
 8000f72:	701a      	strb	r2, [r3, #0]
	 	  	  			  set_Timer3(green_cycle, get_interrupt_cycle());
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <traffic_light+0x22c>)
 8000f76:	681c      	ldr	r4, [r3, #0]
 8000f78:	f7ff fd0c 	bl	8000994 <get_interrupt_cycle>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff fd47 	bl	8000a14 <set_Timer3>
	 	  	  		  break;
 8000f86:	e043      	b.n	8001010 <traffic_light+0x20c>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4826      	ldr	r0, [pc, #152]	; (8001028 <traffic_light+0x224>)
 8000f8e:	f000 fbe6 	bl	800175e <HAL_GPIO_WritePin>
	 	  	  		  scan_2leds(EN_HOR_1_Pin, EN_HOR_2_Pin);
 8000f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f9a:	f7ff fe9b 	bl	8000cd4 <scan_2leds>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin|LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2150      	movs	r1, #80	; 0x50
 8000fa2:	4821      	ldr	r0, [pc, #132]	; (8001028 <traffic_light+0x224>)
 8000fa4:	f000 fbdb 	bl	800175e <HAL_GPIO_WritePin>
	 	  	  		  if(timer_flag3 == 1){
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <traffic_light+0x23c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d131      	bne.n	8001014 <traffic_light+0x210>
	 	  	  			  horizontal = RED;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <traffic_light+0x238>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	 	  	  			  set_Timer3(red_cycle, get_interrupt_cycle());
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <traffic_light+0x230>)
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	f7ff fceb 	bl	8000994 <get_interrupt_cycle>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff fd26 	bl	8000a14 <set_Timer3>
	 	  	  		  break;
 8000fc8:	e024      	b.n	8001014 <traffic_light+0x210>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2140      	movs	r1, #64	; 0x40
 8000fce:	4816      	ldr	r0, [pc, #88]	; (8001028 <traffic_light+0x224>)
 8000fd0:	f000 fbc5 	bl	800175e <HAL_GPIO_WritePin>
	 	  	  		  scan_2leds(EN_HOR_1_Pin, EN_HOR_2_Pin);
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fdc:	f7ff fe7a 	bl	8000cd4 <scan_2leds>
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2130      	movs	r1, #48	; 0x30
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <traffic_light+0x224>)
 8000fe6:	f000 fbba 	bl	800175e <HAL_GPIO_WritePin>
	 	  	  		  if(timer_flag3 == 1){
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <traffic_light+0x23c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d112      	bne.n	8001018 <traffic_light+0x214>
	 	  	  			  horizontal = YELLOW;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <traffic_light+0x238>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
	 	  	  			  set_Timer3(yellow_cycle, get_interrupt_cycle());
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <traffic_light+0x234>)
 8000ffa:	681c      	ldr	r4, [r3, #0]
 8000ffc:	f7ff fcca 	bl	8000994 <get_interrupt_cycle>
 8001000:	4603      	mov	r3, r0
 8001002:	4619      	mov	r1, r3
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff fd05 	bl	8000a14 <set_Timer3>
	 	  	  		  break;
 800100a:	e005      	b.n	8001018 <traffic_light+0x214>
	 	  	  		  break;
 800100c:	bf00      	nop
 800100e:	e004      	b.n	800101a <traffic_light+0x216>
	 	  	  		  break;
 8001010:	bf00      	nop
 8001012:	e002      	b.n	800101a <traffic_light+0x216>
	 	  	  		  break;
 8001014:	bf00      	nop
 8001016:	e000      	b.n	800101a <traffic_light+0x216>
	 	  	  		  break;
 8001018:	bf00      	nop
	 	  	  	  }
	 	  	  }

}
 800101a:	bf00      	nop
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	10624dd3 	.word	0x10624dd3
 8001024:	20000090 	.word	0x20000090
 8001028:	40010800 	.word	0x40010800
 800102c:	20000074 	.word	0x20000074
 8001030:	2000008c 	.word	0x2000008c
 8001034:	20000084 	.word	0x20000084
 8001038:	20000088 	.word	0x20000088
 800103c:	20000004 	.word	0x20000004
 8001040:	2000007c 	.word	0x2000007c

08001044 <display_red_light>:

void display_red_light(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin|LED_RED_VER_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2112      	movs	r1, #18
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <display_red_light+0x3c>)
 800104e:	f000 fb86 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_YELLOW_VER_Pin|LED_GREEN_HOR_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	216c      	movs	r1, #108	; 0x6c
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <display_red_light+0x3c>)
 8001058:	f000 fb81 	bl	800175e <HAL_GPIO_WritePin>
	if(timer_flag2 == 1){
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <display_red_light+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10b      	bne.n	800107c <display_red_light+0x38>
		set_Timer2(100, get_interrupt_cycle());
 8001064:	f7ff fc96 	bl	8000994 <get_interrupt_cycle>
 8001068:	4603      	mov	r3, r0
 800106a:	4619      	mov	r1, r3
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f7ff fcb9 	bl	80009e4 <set_Timer2>
		HAL_GPIO_TogglePin(GPIOA, EN_HOR_1_Pin|EN_HOR_2_Pin|EN_VER_1_Pin|EN_VER_2_Pin);
 8001072:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8001076:	4802      	ldr	r0, [pc, #8]	; (8001080 <display_red_light+0x3c>)
 8001078:	f000 fb89 	bl	800178e <HAL_GPIO_TogglePin>
	}
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010800 	.word	0x40010800
 8001084:	20000078 	.word	0x20000078

08001088 <display_yellow_light>:

void display_yellow_light(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2124      	movs	r1, #36	; 0x24
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <display_yellow_light+0x3c>)
 8001092:	f000 fb64 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin|LED_RED_VER_Pin|LED_GREEN_HOR_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	215a      	movs	r1, #90	; 0x5a
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <display_yellow_light+0x3c>)
 800109c:	f000 fb5f 	bl	800175e <HAL_GPIO_WritePin>
	if(timer_flag2 == 1){
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <display_yellow_light+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10b      	bne.n	80010c0 <display_yellow_light+0x38>
		set_Timer2(100, get_interrupt_cycle());
 80010a8:	f7ff fc74 	bl	8000994 <get_interrupt_cycle>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4619      	mov	r1, r3
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f7ff fc97 	bl	80009e4 <set_Timer2>
		HAL_GPIO_TogglePin(GPIOA, EN_HOR_1_Pin|EN_HOR_2_Pin|EN_VER_1_Pin|EN_VER_2_Pin);
 80010b6:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <display_yellow_light+0x3c>)
 80010bc:	f000 fb67 	bl	800178e <HAL_GPIO_TogglePin>
	}
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40010800 	.word	0x40010800
 80010c8:	20000078 	.word	0x20000078

080010cc <display_green_light>:

void display_green_light(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_HOR_Pin|LED_GREEN_VER_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2148      	movs	r1, #72	; 0x48
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <display_green_light+0x3c>)
 80010d6:	f000 fb42 	bl	800175e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_YELLOW_VER_Pin|LED_RED_HOR_Pin|LED_RED_VER_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2136      	movs	r1, #54	; 0x36
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <display_green_light+0x3c>)
 80010e0:	f000 fb3d 	bl	800175e <HAL_GPIO_WritePin>
	if(timer_flag2 == 1){
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <display_green_light+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10b      	bne.n	8001104 <display_green_light+0x38>
		set_Timer2(100, get_interrupt_cycle());
 80010ec:	f7ff fc52 	bl	8000994 <get_interrupt_cycle>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	2064      	movs	r0, #100	; 0x64
 80010f6:	f7ff fc75 	bl	80009e4 <set_Timer2>
		HAL_GPIO_TogglePin(GPIOA, EN_HOR_1_Pin|EN_HOR_2_Pin|EN_VER_1_Pin|EN_VER_2_Pin);
 80010fa:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80010fe:	4802      	ldr	r0, [pc, #8]	; (8001108 <display_green_light+0x3c>)
 8001100:	f000 fb45 	bl	800178e <HAL_GPIO_TogglePin>
	}
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010800 	.word	0x40010800
 800110c:	20000078 	.word	0x20000078

08001110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff fd92 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001116:	490c      	ldr	r1, [pc, #48]	; (8001148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <LoopFillZerobss+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800112c:	4c09      	ldr	r4, [pc, #36]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f001 fb05 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff faf9 	bl	8000734 <main>
  bx lr
 8001142:	4770      	bx	lr
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800114c:	08002918 	.word	0x08002918
  ldr r2, =_sbss
 8001150:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001154:	200000e4 	.word	0x200000e4

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f923 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fcd6 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f93b 	bl	8001422 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f903 	bl	80013ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	2000000c 	.word	0x2000000c
 8001208:	200000e0 	.word	0x200000e0

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	200000e0 	.word	0x200000e0

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4906      	ldr	r1, [pc, #24]	; (80012b8 <__NVIC_EnableIRQ+0x34>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff90 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff2d 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff42 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff90 	bl	8001310 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5f 	bl	80012bc <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff35 	bl	8001284 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa2 	bl	8001374 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e148      	b.n	80016e2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8137 	bne.w	80016dc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4aa3      	ldr	r2, [pc, #652]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d05e      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001478:	4aa1      	ldr	r2, [pc, #644]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d875      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800147e:	4aa1      	ldr	r2, [pc, #644]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d058      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001484:	4a9f      	ldr	r2, [pc, #636]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d86f      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800148a:	4a9f      	ldr	r2, [pc, #636]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d052      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001490:	4a9d      	ldr	r2, [pc, #628]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d869      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 8001496:	4a9d      	ldr	r2, [pc, #628]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d04c      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 800149c:	4a9b      	ldr	r2, [pc, #620]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d863      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014a2:	4a9b      	ldr	r2, [pc, #620]	; (8001710 <HAL_GPIO_Init+0x2d4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d046      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 80014a8:	4a99      	ldr	r2, [pc, #612]	; (8001710 <HAL_GPIO_Init+0x2d4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d85d      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d82a      	bhi.n	8001508 <HAL_GPIO_Init+0xcc>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d859      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <HAL_GPIO_Init+0x80>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001511 	.word	0x08001511
 80014c4:	08001523 	.word	0x08001523
 80014c8:	08001565 	.word	0x08001565
 80014cc:	0800156b 	.word	0x0800156b
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	0800156b 	.word	0x0800156b
 80014d8:	0800156b 	.word	0x0800156b
 80014dc:	0800156b 	.word	0x0800156b
 80014e0:	0800156b 	.word	0x0800156b
 80014e4:	0800156b 	.word	0x0800156b
 80014e8:	0800156b 	.word	0x0800156b
 80014ec:	0800156b 	.word	0x0800156b
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	0800156b 	.word	0x0800156b
 80014f8:	0800156b 	.word	0x0800156b
 80014fc:	0800156b 	.word	0x0800156b
 8001500:	08001519 	.word	0x08001519
 8001504:	0800152d 	.word	0x0800152d
 8001508:	4a82      	ldr	r2, [pc, #520]	; (8001714 <HAL_GPIO_Init+0x2d8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150e:	e02c      	b.n	800156a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e029      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e024      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e01f      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	330c      	adds	r3, #12
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e01a      	b.n	800156c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153e:	2304      	movs	r3, #4
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e013      	b.n	800156c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	611a      	str	r2, [r3, #16]
          break;
 8001556:	e009      	b.n	800156c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001558:	2308      	movs	r3, #8
 800155a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	615a      	str	r2, [r3, #20]
          break;
 8001562:	e003      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x130>
          break;
 800156a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d801      	bhi.n	8001576 <HAL_GPIO_Init+0x13a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	e001      	b.n	800157a <HAL_GPIO_Init+0x13e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d802      	bhi.n	8001588 <HAL_GPIO_Init+0x14c>
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x152>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	3b08      	subs	r3, #8
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	210f      	movs	r1, #15
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	6a39      	ldr	r1, [r7, #32]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8090 	beq.w	80016dc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_GPIO_Init+0x2dc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a55      	ldr	r2, [pc, #340]	; (8001718 <HAL_GPIO_Init+0x2dc>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_GPIO_Init+0x2dc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d4:	4a51      	ldr	r2, [pc, #324]	; (800171c <HAL_GPIO_Init+0x2e0>)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a49      	ldr	r2, [pc, #292]	; (8001720 <HAL_GPIO_Init+0x2e4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1e0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a48      	ldr	r2, [pc, #288]	; (8001724 <HAL_GPIO_Init+0x2e8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1dc>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a47      	ldr	r2, [pc, #284]	; (8001728 <HAL_GPIO_Init+0x2ec>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1d8>
 8001610:	2302      	movs	r3, #2
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 8001614:	2303      	movs	r3, #3
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 800161c:	2300      	movs	r3, #0
 800161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162e:	493b      	ldr	r1, [pc, #236]	; (800171c <HAL_GPIO_Init+0x2e0>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001648:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	4937      	ldr	r1, [pc, #220]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b35      	ldr	r3, [pc, #212]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4933      	ldr	r1, [pc, #204]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001660:	4013      	ands	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	492d      	ldr	r1, [pc, #180]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167e:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4929      	ldr	r1, [pc, #164]	; (800172c <HAL_GPIO_Init+0x2f0>)
 8001688:	4013      	ands	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4923      	ldr	r1, [pc, #140]	; (800172c <HAL_GPIO_Init+0x2f0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	491f      	ldr	r1, [pc, #124]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4919      	ldr	r1, [pc, #100]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4915      	ldr	r1, [pc, #84]	; (800172c <HAL_GPIO_Init+0x2f0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3301      	adds	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f aeaf 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	372c      	adds	r7, #44	; 0x2c
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	10320000 	.word	0x10320000
 8001704:	10310000 	.word	0x10310000
 8001708:	10220000 	.word	0x10220000
 800170c:	10210000 	.word	0x10210000
 8001710:	10120000 	.word	0x10120000
 8001714:	10110000 	.word	0x10110000
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	807b      	strh	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800176e:	787b      	ldrb	r3, [r7, #1]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800177a:	e003      	b.n	8001784 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	041a      	lsls	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	611a      	str	r2, [r3, #16]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	400b      	ands	r3, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e26c      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8087 	beq.w	80018ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d00c      	beq.n	8001806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ec:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d112      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
 80017f8:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d10b      	bne.n	800181e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d06c      	beq.n	80018ec <HAL_RCC_OscConfig+0x12c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d168      	bne.n	80018ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e246      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x76>
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e02e      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0xbc>
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xd4>
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fcb6 	bl	800120c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fcb2 	bl	800120c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1fa      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xe4>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fca2 	bl	800120c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fc9e 	bl	800120c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1e6      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x10c>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fa:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1ba      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4939      	ldr	r1, [pc, #228]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fc57 	bl	800120c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fc53 	bl	800120c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e19b      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x270>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fc36 	bl	800120c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc32 	bl	800120c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e17a      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03a      	beq.n	8001a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fc16 	bl	800120c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc12 	bl	800120c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e15a      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 fa9a 	bl	8001f3c <RCC_Delay>
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fbfc 	bl	800120c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a16:	e00f      	b.n	8001a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fbf8 	bl	800120c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d908      	bls.n	8001a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e140      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	42420000 	.word	0x42420000
 8001a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b9e      	ldr	r3, [pc, #632]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e9      	bne.n	8001a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a6 	beq.w	8001b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b97      	ldr	r3, [pc, #604]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b94      	ldr	r3, [pc, #592]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a93      	ldr	r2, [pc, #588]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b91      	ldr	r3, [pc, #580]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a8a      	ldr	r2, [pc, #552]	; (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fbb9 	bl	800120c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff fbb5 	bl	800120c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0fd      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x4f8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x312>
 8001ac4:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a7a      	ldr	r2, [pc, #488]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	e02d      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x334>
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a72      	ldr	r2, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e01c      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x356>
 8001afc:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a6c      	ldr	r2, [pc, #432]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x36e>
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a63      	ldr	r2, [pc, #396]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d015      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fb69 	bl	800120c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fb65 	bl	800120c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0ab      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ee      	beq.n	8001b3e <HAL_RCC_OscConfig+0x37e>
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb53 	bl	800120c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fb4f 	bl	800120c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e095      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a47      	ldr	r2, [pc, #284]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8081 	beq.w	8001caa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d061      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d146      	bne.n	8001c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0x4fc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fb23 	bl	800120c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff fb1f 	bl	800120c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e067      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	492d      	ldr	r1, [pc, #180]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a19      	ldr	r1, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	430b      	orrs	r3, r1
 8001c16:	4927      	ldr	r1, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x4fc>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff faf3 	bl	800120c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff faef 	bl	800120c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e037      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46a>
 8001c48:	e02f      	b.n	8001caa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_RCC_OscConfig+0x4fc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fadc 	bl	800120c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fad8 	bl	800120c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e020      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x498>
 8001c76:	e018      	b.n	8001caa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e013      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420060 	.word	0x42420060

08001cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d0      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4965      	ldr	r1, [pc, #404]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b8      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	494d      	ldr	r1, [pc, #308]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d040      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d115      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e07f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e073      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06b      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4936      	ldr	r1, [pc, #216]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7ff fa2c 	bl	800120c <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff fa28 	bl	800120c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e053      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 020c 	and.w	r2, r3, #12
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1eb      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d210      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4922      	ldr	r1, [pc, #136]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e032      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4916      	ldr	r1, [pc, #88]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490e      	ldr	r1, [pc, #56]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4e:	f000 f821 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490a      	ldr	r1, [pc, #40]	; (8001e88 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1cc>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1d0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f98a 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	080028ec 	.word	0x080028ec
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000008 	.word	0x20000008

08001e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x36>
 8001ec2:	e027      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	613b      	str	r3, [r7, #16]
      break;
 8001ec8:	e027      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0c9b      	lsrs	r3, r3, #18
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
 8001ed6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0c5b      	lsrs	r3, r3, #17
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef6:	fb02 f203 	mul.w	r2, r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e004      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	613b      	str	r3, [r7, #16]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f16:	613b      	str	r3, [r7, #16]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	693b      	ldr	r3, [r7, #16]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	080028fc 	.word	0x080028fc
 8001f34:	0800290c 	.word	0x0800290c
 8001f38:	003d0900 	.word	0x003d0900

08001f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <RCC_Delay+0x34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <RCC_Delay+0x38>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0a5b      	lsrs	r3, r3, #9
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f58:	bf00      	nop
  }
  while (Delay --);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	60fa      	str	r2, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f9      	bne.n	8001f58 <RCC_Delay+0x1c>
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000000 	.word	0x20000000
 8001f74:	10624dd3 	.word	0x10624dd3

08001f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e041      	b.n	800200e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fdf4 	bl	8000b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	f000 fa6e 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d001      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e035      	b.n	800209c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_TIM_Base_Start_IT+0x90>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_TIM_Base_Start_IT+0x4e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d004      	beq.n	8002066 <HAL_TIM_Base_Start_IT+0x4e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a12      	ldr	r2, [pc, #72]	; (80020ac <HAL_TIM_Base_Start_IT+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d111      	bne.n	800208a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b06      	cmp	r3, #6
 8002076:	d010      	beq.n	800209a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002088:	e007      	b.n	800209a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400

080020b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0202 	mvn.w	r2, #2
 80020dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f9b4 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f9a7 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f9b6 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b04      	cmp	r3, #4
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0204 	mvn.w	r2, #4
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f98a 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f97d 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f98c 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b08      	cmp	r3, #8
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0208 	mvn.w	r2, #8
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f960 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f953 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f962 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0210 	mvn.w	r2, #16
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2208      	movs	r2, #8
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f936 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f929 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f938 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0201 	mvn.w	r2, #1
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fb9e 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b80      	cmp	r3, #128	; 0x80
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	2b80      	cmp	r3, #128	; 0x80
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fa6b 	bl	8002736 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8fc 	bl	8002484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0220 	mvn.w	r2, #32
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa36 	bl	8002724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_ConfigClockSource+0x1c>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0b4      	b.n	8002446 <HAL_TIM_ConfigClockSource+0x186>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002314:	d03e      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xd4>
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	f200 8087 	bhi.w	800242c <HAL_TIM_ConfigClockSource+0x16c>
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	f000 8086 	beq.w	8002432 <HAL_TIM_ConfigClockSource+0x172>
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d87f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d01a      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0xa6>
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d87b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b60      	cmp	r3, #96	; 0x60
 8002336:	d050      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x11a>
 8002338:	2b60      	cmp	r3, #96	; 0x60
 800233a:	d877      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 800233c:	2b50      	cmp	r3, #80	; 0x50
 800233e:	d03c      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xfa>
 8002340:	2b50      	cmp	r3, #80	; 0x50
 8002342:	d873      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d058      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x13a>
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d86f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 800234c:	2b30      	cmp	r3, #48	; 0x30
 800234e:	d064      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x15a>
 8002350:	2b30      	cmp	r3, #48	; 0x30
 8002352:	d86b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d060      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x15a>
 8002358:	2b20      	cmp	r3, #32
 800235a:	d867      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05c      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x15a>
 8002360:	2b10      	cmp	r3, #16
 8002362:	d05a      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x15a>
 8002364:	e062      	b.n	800242c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f000 f95e 	bl	8002636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	609a      	str	r2, [r3, #8]
      break;
 8002392:	e04f      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f000 f947 	bl	8002636 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e03c      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 f8be 	bl	8002548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2150      	movs	r1, #80	; 0x50
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f915 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e02c      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 f8dc 	bl	80025a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2160      	movs	r1, #96	; 0x60
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f905 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e01c      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 f89e 	bl	8002548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f8f5 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002418:	e00c      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f000 f8ec 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 800242a:	e003      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	e000      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
	...

08002498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a25      	ldr	r2, [pc, #148]	; (8002540 <TIM_Base_SetConfig+0xa8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d007      	beq.n	80024c0 <TIM_Base_SetConfig+0x28>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d003      	beq.n	80024c0 <TIM_Base_SetConfig+0x28>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a22      	ldr	r2, [pc, #136]	; (8002544 <TIM_Base_SetConfig+0xac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <TIM_Base_SetConfig+0xa8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <TIM_Base_SetConfig+0x52>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d003      	beq.n	80024ea <TIM_Base_SetConfig+0x52>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a17      	ldr	r2, [pc, #92]	; (8002544 <TIM_Base_SetConfig+0xac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d108      	bne.n	80024fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <TIM_Base_SetConfig+0xa8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40000400 	.word	0x40000400

08002548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0201 	bic.w	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 030a 	bic.w	r3, r3, #10
 8002584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0210 	bic.w	r2, r3, #16
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	031b      	lsls	r3, r3, #12
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	f043 0307 	orr.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002636:	b480      	push	{r7}
 8002638:	b087      	sub	sp, #28
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4313      	orrs	r3, r2
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	609a      	str	r2, [r3, #8]
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002688:	2302      	movs	r3, #2
 800268a:	e041      	b.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d004      	beq.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10c      	bne.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40000400 	.word	0x40000400

08002724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2600      	movs	r6, #0
 800274c:	4d0c      	ldr	r5, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1b64      	subs	r4, r4, r5
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a6      	cmp	r6, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	f000 f830 	bl	80027bc <_init>
 800275c:	2600      	movs	r6, #0
 800275e:	4d0a      	ldr	r5, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4c0a      	ldr	r4, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a6      	cmp	r6, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002770:	4798      	blx	r3
 8002772:	3601      	adds	r6, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f855 3b04 	ldr.w	r3, [r5], #4
 800277a:	4798      	blx	r3
 800277c:	3601      	adds	r6, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	08002910 	.word	0x08002910
 8002784:	08002910 	.word	0x08002910
 8002788:	08002910 	.word	0x08002910
 800278c:	08002914 	.word	0x08002914

08002790 <memcpy>:
 8002790:	440a      	add	r2, r1
 8002792:	4291      	cmp	r1, r2
 8002794:	f100 33ff 	add.w	r3, r0, #4294967295
 8002798:	d100      	bne.n	800279c <memcpy+0xc>
 800279a:	4770      	bx	lr
 800279c:	b510      	push	{r4, lr}
 800279e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027a2:	4291      	cmp	r1, r2
 80027a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027a8:	d1f9      	bne.n	800279e <memcpy+0xe>
 80027aa:	bd10      	pop	{r4, pc}

080027ac <memset>:
 80027ac:	4603      	mov	r3, r0
 80027ae:	4402      	add	r2, r0
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d100      	bne.n	80027b6 <memset+0xa>
 80027b4:	4770      	bx	lr
 80027b6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ba:	e7f9      	b.n	80027b0 <memset+0x4>

080027bc <_init>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr

080027c8 <_fini>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr
