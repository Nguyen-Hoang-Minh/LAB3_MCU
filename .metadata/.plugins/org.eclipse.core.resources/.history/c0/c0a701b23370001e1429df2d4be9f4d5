/*
 * traffic_light.c
 *
 *  Created on: Oct 21, 2023
 *      Author: ADMIN
 */

#include "traffic_light.h"
#include "main.h"
#include "software_timer.h"
#include "Seven_segment_led.h"
enum traffic_light_state{
	RED,
	YELLOW,
	GREEN
};
int red_cycle = 0, yellow_cycle = 0, green_cycle = 0;
enum traffic_light_state vertical = RED;
enum traffic_light_state horizontal = GREEN;
int display_flag;
void set_red_cycle(int duration){
	red_cycle = duration;
}

void set_yellow_cycle(int duration){
	yellow_cycle = duration;
}

void set_green_cycle(int duration){
	green_cycle = duration;
}

void  scan_2leds(uint16_t led1, uint16_t led2){
	if(timer_flag2 == 1){
		set_Timer2(500, get_interrupt_cycle());
		HAL_GPIO_TogglePin(GPIOA, led1|led2);
	}
}

void scan_4leds(){
	if(timer_flag4 == 1){
		set_Timer4(500, get_interrupt_cycle());
		update_display(&display_flag);
	}
}
void init_traffic_light(){
	HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, EN_HOR_1_Pin|EN_VER_1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, EN_HOR_2_Pin|EN_VER_2_Pin, GPIO_PIN_SET);
	set_Timer1(red_cycle, get_interrupt_cycle());
	set_Timer3(green_cycle, get_interrupt_cycle());
	set_Timer2(500, get_interrupt_cycle());
	init_7seg();
	display_flag = 0;
}
void traffic_light(){
	//display7SEG(get_timer1_counter());
	 	  switch (vertical){
	 	  	  case RED:{
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin, GPIO_PIN_RESET);
	 	  		  scan_2leds(EN_VER_1_Pin, EN_VER_2_Pin);
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
	 	  		  if(timer_flag1 == 1){
	 	  			  vertical = GREEN;
	 	  			  set_Timer1(green_cycle, get_interrupt_cycle());
	 	  		  }
	 	  		  break;
	 	  	  }
	 	  	  case YELLOW:{
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
	 	  		  scan_2leds(EN_VER_1_Pin, EN_VER_2_Pin);
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin|LED_GREEN_VER_Pin, GPIO_PIN_SET);
	 	  		  if(timer_flag1 == 1){
	 	  			  vertical = RED;
	 	  			  set_Timer1(red_cycle, get_interrupt_cycle());
	 	  		  }
	 	  		  break;
	 	  	  }
	 	  	  case GREEN:{
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
	 	  		  scan_2leds(EN_VER_1_Pin, EN_VER_2_Pin);
	 	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_VER_Pin|LED_YELLOW_VER_Pin, GPIO_PIN_SET);
	 	  		  if(timer_flag1 == 1){
	 	  			  vertical = YELLOW;
	 	  			  set_Timer1(yellow_cycle, get_interrupt_cycle());
	 	  		  }
	 	  		  break;
	 	  	  }
	 	  	  default:{
	 	  		  break;
	 	  	  }
	 	  }
	 	  switch (horizontal){
	 	  	  	  case RED:{
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin, GPIO_PIN_RESET);
	 	  	  		  scan_2leds(EN_HOR_1_Pin, EN_HOR_2_Pin);
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	 	  	  		  if(timer_flag3 == 1){
	 	  	  			  horizontal = GREEN;
	 	  	  			  set_Timer3(green_cycle, get_interrupt_cycle());
	 	  	  		  }
	 	  	  		  break;
	 	  	  	  }
	 	  	  	  case YELLOW:{
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
	 	  	  		  scan_2leds(EN_HOR_1_Pin, EN_HOR_2_Pin);
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin|LED_GREEN_HOR_Pin, GPIO_PIN_SET);
	 	  	  		  if(timer_flag3 == 1){
	 	  	  			  horizontal = RED;
	 	  	  			  set_Timer3(red_cycle, get_interrupt_cycle());
	 	  	  		  }
	 	  	  		  break;
	 	  	  	  }
	 	  	  	  case GREEN:{
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
	 	  	  		  scan_2leds(EN_HOR_1_Pin, EN_HOR_2_Pin);
	 	  	  		  HAL_GPIO_WritePin(GPIOA, LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
	 	  	  		  if(timer_flag3 == 1){
	 	  	  			  horizontal = YELLOW;
	 	  	  			  set_Timer3(yellow_cycle, get_interrupt_cycle());
	 	  	  		  }
	 	  	  		  break;
	 	  	  	  }
	 	  	  	  default:{
	 	  	  		  break;
	 	  	  	  }
	 	  	  }

}
